pipeline {
    agent any
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to build from')
        string(name: 'REPO_URL', defaultValue: 'https://github.com/astine85/market-vector.git', description: 'Repository URL to build from')
        string(name: 'VERSION', defaultValue: "V00${BUILD_ID}", description: 'Version of Docker image to be built, e.g., V001')
        
    }

    environment {
        BRANCH = "${params.BRANCH}"
        REPO_URL = "${params.REPO_URL}"
        VERSION = "${params.VERSION}"
        KUBECONFIG = '/home/jenkins/.kube/config'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Clone GitHub Repo') {
            steps {
                git branch: "${BRANCH}", credentialsId: 'github_creds', url: "${REPO_URL}"
            }
        }

        stage('Building Docker Image') {
            steps {
                sh "docker build -t eks-repo ."
            }
        }

        stage('Push To Elastic Container Registry') {
            steps {
                script {
                    
                        sh """
                            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 992382432814.dkr.ecr.us-east-1.amazonaws.com
                            docker tag eks-repo:latest 992382432814.dkr.ecr.us-east-1.amazonaws.com/market-vector:${VERSION}
                            docker push 992382432814.dkr.ecr.us-east-1.amazonaws.com/market-vector:${VERSION}
                        """
                    
                }
            }
        }

        stage('Deploy To K8S Cluster') {
            steps {
                script {
                    dir('kubernetes') {
                    
                        sh """
                        
                        echo "Deploying to Kubernetes cluster"
                        export KUBECONFIG=${KUBECONFIG}
                        kubectl apply -f . --validate=false
                        
                        """
                    }
                    
                }
            }
        }
        
        stage('Get K8S Cluster Services') {
            steps {
                script {
                    dir('kubernetes') {
                    
                        sh """
                        
                        echo "Deploying to Kubernetes cluster"
                        export KUBECONFIG=${KUBECONFIG}
                        kubectl get svc --namespace=oxer-app-dev
                        
                        """
                    }
                    
                }
            }
        }
    }
}
